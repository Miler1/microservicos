{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserService from '../services/user.service';\nimport CourseService from '../services/course.service';\nimport { User } from '../models/user';\nimport { Transaction } from '../models/transaction';\nexport default {\n  name: 'home',\n  data() {\n    return {\n      courses: [],\n      currentUser: new User()\n    };\n  },\n  created() {\n    UserService.currentUser.subscribe(data => {\n      this.currentUser = data;\n    });\n    CourseService.findAllCourses().then(data => {\n      this.courses = data.data;\n    });\n  },\n  methods: {\n    enroll(course) {\n      if (!this.currentUser) {\n        this.$store.dispatch('error', 'You should sign in to enroll a course.');\n        return;\n      }\n      var transaction = new Transaction(this.currentUser.id, course);\n      CourseService.createTransaction(transaction).then(data => {\n        this.$store.dispatch('success', 'Enrollment is completed.');\n      }, error => {\n        console.log(error);\n        this.$store.dispatch('error', 'Unexpected error occurred.');\n      });\n    },\n    detail(item) {\n      localStorage.setItem('detailCourse', JSON.stringify(item));\n      this.$router.push({\n        name: 'detail',\n        params: {\n          id: item.id\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AA0CA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACAC;MACA;QACA;QACA;MACA;MACA;MACAF;QACA;MACA;QACAG;QACA;MACA;IACA;IACAC;MACAC;MACA;QAAAX;QAAAY;UAAAC;QAAA;MAAA;IACA;EACA;AACA","names":["name","data","courses","currentUser","created","UserService","CourseService","methods","enroll","console","detail","localStorage","params","id"],"sourceRoot":"src/views","sources":["Home.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"transaction-container\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <div class=\"col col-xs-6\">\n              <h3 class=\"panel-title\">All Courses</h3>\n          </div>\n        </div>\n\n        <div class=\"card-body\">\n          <table class=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Course Title</th>\n                <th scope=\"col\">Author</th>\n                <th scope=\"col\">Detail</th>\n                <th scope=\"col\">Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(item, index) in courses\" v-bind:key=\"item.id\">\n                <th scope=\"row\">{{index}}</th>\n                <td>{{item.title}}</td>\n                <td>{{item.author}}</td>\n                <td>\n                  <button class=\"btn btn-info\" @click=\"detail(item)\">Detail</button>\n                </td>\n                <td>\n                  <button class=\"btn btn-info\" @click=\"enroll(item)\">Enroll</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport UserService from '../services/user.service';\nimport CourseService from '../services/course.service';\nimport {User} from '../models/user';\nimport {Transaction} from '../models/transaction';\n\nexport default {\n  name: 'home',\n  data() {\n    return {\n      courses: [],\n      currentUser: new User(),\n    };\n  },\n  created() {\n    UserService.currentUser.subscribe(data => {\n      this.currentUser = data;\n    });\n    CourseService.findAllCourses().then(data => {\n      this.courses = data.data;\n    });\n  },\n  methods: {\n    enroll(course) {\n      if(!this.currentUser) {\n        this.$store.dispatch('error', 'You should sign in to enroll a course.');\n        return;\n      }\n      var transaction = new Transaction(this.currentUser.id, course);\n      CourseService.createTransaction(transaction).then(data => {\n        this.$store.dispatch('success', 'Enrollment is completed.');\n      }, error => {\n        console.log(error);\n        this.$store.dispatch('error', 'Unexpected error occurred.');\n      })\n    },\n    detail(item) {\n      localStorage.setItem('detailCourse', JSON.stringify(item));\n      this.$router.push({name: 'detail', params: {id: item.id}});\n    }\n  }\n}\n</script>\n<style scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}